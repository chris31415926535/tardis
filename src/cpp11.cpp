// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// code.cpp
cpp11::strings split_string_after_punctuation_cpp11(std::string string_to_split);
extern "C" SEXP _tardis_split_string_after_punctuation_cpp11(SEXP string_to_split) {
  BEGIN_CPP11
    return cpp11::as_sexp(split_string_after_punctuation_cpp11(cpp11::as_cpp<cpp11::decay_t<std::string>>(string_to_split)));
  END_CPP11
}
// code.cpp
cpp11::doubles get_nonzero_value_cpp11(cpp11::doubles x, cpp11::doubles y);
extern "C" SEXP _tardis_get_nonzero_value_cpp11(SEXP x, SEXP y) {
  BEGIN_CPP11
    return cpp11::as_sexp(get_nonzero_value_cpp11(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(x), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(y)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_tardis_get_nonzero_value_cpp11",              (DL_FUNC) &_tardis_get_nonzero_value_cpp11,              2},
    {"_tardis_split_string_after_punctuation_cpp11", (DL_FUNC) &_tardis_split_string_after_punctuation_cpp11, 1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_tardis(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
